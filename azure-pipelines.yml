# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

variables:
  imageRepo: ms-devops
  tag: '0.0.1-SNAPSHOT'

stages:
- stage: Build
  displayName: Build stage
  jobs:
    - job: Build
      displayName: Build Job
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: Maven@3
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          goals: 'package'

      - task: Maven@3
        displayName: Build Docker image
        inputs:
          mavenPomFile: 'pom.xml'
          goals: 'spring-boot:build-image'
          publishJUnitResults: false
          jdkVersionOption: '1.11'

      - task: Docker@2
        displayName: Push Docker image
        inputs:
          containerRegistry: 'acrdevopsbp'
          repository: '$(imageRepo)'
          command: 'push'
          tags: |
            $(tag)
            lastest
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Pipeline.Workspace)/manifests'
          artifact: 'manifests'
          publishLocation: 'pipeline'
        
- stage: Deploy
  displayName: Deploy to Dev
  dependsOn: Build
  variables:
    acrsecret: k8sacrauth
    acrdevurl: 'acrdevopsbp.azurecr.io'
    replicaNo: 3
  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    environment: 'k8sdev.default'
    pool: 
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'manifests'
              targetPath: '$(Pipeline.Workspace)/manifests'
          - task: KubernetesManifest@0
            inputs:
              action: 'createSecret'
              namespace: 'default'
              secretType: 'dockerRegistry'
              secretName: '$(acrsecret)'
              dockerRegistryEndpoint: 'acrdevopsbp'
          - task: KubernetesManifest@0
            inputs:
              action: 'deploy'
              namespace: 'default'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              containers: '$(acrdevurl)/$(imageRepo):$(tag)'
              imagePullSecrets: '$(acrsecret)'